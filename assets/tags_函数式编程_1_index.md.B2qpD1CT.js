import{P as o,a as n}from"./chunks/PostsContainer.CutwuT5g.js";import{d as l,c as s,o as a,G as p,w as i,F as d,B as c,b as m}from"./chunks/framework.BHpayLOB.js";import"./chunks/CustomContainer.D2tcrHcd.js";import"./chunks/theme.CxKxqB40.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"posts","sidebar":false,"next":{"text":"Windows 畅玩 Claude Code","link":"/post/use-claude-code-router"}},"headers":[],"params":{"page":1,"next":null,"prev":null,"items":[{"title":"Python 函数式编程","date":"2025-03-31T13:26:13.000Z","tags":["Python","编程范式","函数式编程"],"description":"高阶函数 map函数实践 通过将函数作用于可迭代对象的每个元素实现批量处理： def square(x):     return x * x  result = map(square, range(1,10)) print(list(result))  # [1, 4, 9, ..., 81]  特性说明：  map(","filePath":"F:\\\\Development\\\\Personal\\\\blog-creator\\\\src\\\\post\\\\py-functional.md","to":"/post/py-functional"},{"title":"React 函数式编程的要点","date":"2024-10-17T01:06:52.000Z","tags":["React","函数式编程"],"description":"React 函数式编程的核心理念 在使用 React 进行函数式编程时，有几个关键点需要牢记：  关注依赖关系，而非执行顺序：函数式编程更注重组件和函数之间的依赖关系，而不是代码的执行顺序。 隔离副作用：函数式编程的目标是将副作用（如数据获取、DOM 操作等）限制在小范围内，防止它们影响整体程序的纯度。 保持纯函数：在","filePath":"F:\\\\Development\\\\Personal\\\\blog-creator\\\\src\\\\post\\\\react-functional.md","to":"/post/react-functional"}],"name":"函数式编程","path":"函数式编程","total":1},"relativePath":"tags/函数式编程/1/index.md","filePath":"tags/[path]/[page]/index.md","lastUpdated":1714266532000}'),u={name:"tags/函数式编程/1/index.md"},$=l({...u,setup(g){return(t,f)=>(a(),s("div",null,[p(n,{title:`标签：${t.$params.name}`,next:t.$params.next,prev:t.$params.prev,page:t.$params.page,total:t.$params.total},{default:i(()=>[(a(!0),s(d,null,c(t.$params.items,(e,r)=>(a(),m(o,{key:r,title:e.title,to:e.to,description:e.description,date:e.date,tags:e.tags},null,8,["title","to","description","date","tags"]))),128))]),_:1},8,["title","next","prev","page","total"])]))}});export{_ as __pageData,$ as default};
