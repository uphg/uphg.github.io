import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.BHpayLOB.js";const E=JSON.parse('{"title":"DOM 操作跨线程","description":"","frontmatter":{"title":"DOM 操作跨线程","date":"2020-09-14T15:07:31.000Z","tags":["JavaScript","DOM"],"prev":{"text":"正则表达式入门","link":"/post/regexp-started"},"next":{"text":"BFC 是什么","link":"/post/what-is-bfc"}},"headers":[],"relativePath":"post/dom-operate-across-threads.md","filePath":"post/dom-operate-across-threads.md","lastUpdated":1714212862000}'),e={name:"post/dom-operate-across-threads.md"};function n(h,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>JavaScript 引擎是无法直接操作页面的，只能通过 JavaScript 调用 DOM API，当浏览器发现 JavaScript 调用了像 <code>document.body.appendChild(div)</code> 这样的 DOM API ，就会通知渲染引擎，新增一个与 JavaScript 中 div 属性一模一样的 div。这就叫做<strong>跨线程通信</strong>。</p><h2 id="插入一个标签的完整过程" tabindex="-1">插入一个标签的完整过程 <a class="header-anchor" href="#插入一个标签的完整过程" aria-label="Permalink to &quot;插入一个标签的完整过程&quot;">​</a></h2><ol><li>元素放入页面之前： <ul><li>你对元素所有操作都在 JavaScript 线程中。</li></ul></li><li>元素放入页面时： <ul><li>浏览器发现 JavaScript 的意图，通知渲染引擎在页面中渲染对应的元素。</li></ul></li><li>元素放入页面之后： <ul><li>你对元素的任何操作都有可能触发重新渲染。</li></ul></li></ol><h2 id="可能会触发重新渲染的操作" tabindex="-1">可能会触发重新渲染的操作 <a class="header-anchor" href="#可能会触发重新渲染的操作" aria-label="Permalink to &quot;可能会触发重新渲染的操作&quot;">​</a></h2><p>由于页面的重新渲染会很耗费内存，所以浏览器会想尽办法减少重新渲染的次数，在某些不必要的情况下并不会进行重新渲染。或者通过合并多次 JavaScript 对 DOM API 的操作，以此减少重新渲染的次数。</p><p><strong>通过修改 <code>id</code> 属性触发重新渲染</strong></p><p>比如一个获取到一个 div，修改它的 <code>div.id = &#39;newId&#39;</code>。此时如果 newId 附带样式等操作，就会触发重新渲染，如果只是id，可能不会触发。</p><p><strong>通过修改 <code>title</code> 属性触发重新渲染</strong></p><p>假如有如下样式的 div</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;titleHi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">attr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行以下代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;newId&#39;</span></span></code></pre></div><blockquote><p>当它的 <code>title</code> 被修改时，由于 after 伪元素需要通过它的 <code>title</code> 属性来渲染，所以会触发浏览器的重新渲染。</p></blockquote><p><strong>3. 通过获取宽度/高度触发重新渲染</strong></p><p>假如有如下样式的 div</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: width </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行如下代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.clientWidth             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这句话看似无用，实际会触发重新渲染</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.classList.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>案例链接：<a href="http://js.jirengu.com/yefac/1/edit?html,css,js,output" target="_blank" rel="noreferrer">http://js.jirengu.com/yefac/1/edit?html,css,js,output</a></p><blockquote><p>当你连续对同一个 div 做多次操作时，浏览器可能会合并为一次操作，在某些情况下，会导致动画的效果无法展现。这时可以获取一下元素的宽度，让浏览器不得不触发重新渲染（因为在获取宽度时必须要知道当前元素真正的宽度，也就是把它放进浏览器窗口中）。</p></blockquote><h2 id="属性同步" tabindex="-1">属性同步 <a class="header-anchor" href="#属性同步" aria-label="Permalink to &quot;属性同步&quot;">​</a></h2><ol><li>一个元素默认的标准属性被修改时，会自动同步至浏览器，比如 <code>id</code>、<code>className</code>、<code>title</code> 等。</li><li>带有 <code>data-</code> 的属性原理同上。</li><li>如果给元素随便赋值一个非标准属性，如 <code>x=&quot;1&quot;</code> 则对该元素的属性修改只会停留在 JavaScript 中，并不会同步到页面。</li></ol><blockquote><p>结论：如果需要自定义一个属性，并希望它在修改时可以被浏览器同步到页面，就使用 <code>data-</code> 作为前缀。</p></blockquote>`,26)]))}const c=i(e,[["render",n]]);export{E as __pageData,c as default};
