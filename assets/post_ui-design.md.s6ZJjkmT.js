import{_ as t,c as p,o as i,ag as e}from"./chunks/framework.BHpayLOB.js";const s="/assets/ui-design-tips-0.DYcY_vvo.jpg",r="/assets/ui-design-tips-1.qUAdsjdi.jpg",o="/assets/ui-design-tips-2.1.BYQ97TWS.jpg",l="/assets/ui-design-tips-2.2.BvDklDrD.jpg",n="/assets/ui-design-tips-3.C4kH4ZLs.jpg",_="/assets/ui-design-tips-4.3.DVt8b24v.jpg",c="/assets/ui-design-tips-4.4.BWsm9IRy.jpg",h="/assets/ui-design-tips-4.1.ByV63hS3.jpg",g="/assets/ui-design-tips-4.BvlRqiaq.jpg",d="/assets/ui-design-tips-4.2.CKBV34pv.jpg",m="/assets/ui-design-tips-5.1.-wdfBYXR.jpg",u="/assets/ui-design-tips-5.b46vylKj.jpg",f="/assets/ui-design-tips-6.1.jUXsuap1.jpg",b="/assets/ui-design-tips-6.CJU_rHA6.jpg",q="/assets/ui-design-tips-7.1.Bup1thhs.jpg",j="/assets/ui-design-tips-7.2.DQyYPk0T.jpg",k="/assets/ui-design-tips-7.OXdgRRsZ.jpg",x="/assets/ui-design-tips-8.1.Dlekdsir.jpg",P="/assets/ui-design-tips-8.XTgXJa97.jpg",B="/assets/ui-design-tips-9.1.Bs0rzlNx.jpg",w="/assets/ui-design-tips-10.1.DcYGAp11.jpg",v="/assets/ui-design-tips-10.C_ilty1b.jpg",C="/assets/x-height-comparison-1.CdPzT0pm.jpg",D="/assets/x-height-comparison-2.DTMS4sZ8.jpg",T="/assets/ui-design-tips-11.BpS5KZ5h.jpg",A="/assets/uppercase-shape-1.Bvdfb8nM.jpg",G="/assets/uppercase-shape-2.BExilfRZ.jpg",S="/assets/ui-design-tips-12.BH9sqGvm.jpg",U="/assets/ui-design-tips-13.2.DGdCZGDH.jpg",I="/assets/ui-design-tips-13.1.BzRL5m24.jpg",R="/assets/ui-design-tips-13.CWtcBoEg.jpg",y="/assets/ui-design-tips-14.CRfszvL9.jpg",H="/assets/ui-design-tips-15.1.bwQn-nxG.jpg",Y="/assets/ui-design-tips-15.BSxwQNHY.jpg",Z="/assets/ui-design-tips-16.1.CYRfTaBG.jpg",W="/assets/ui-design-tips-16.Cg4O4CFZ.jpg",J=JSON.parse('{"title":"「转」UI 设计的 16 条原则","description":"","frontmatter":{"title":"「转」UI 设计的 16 条原则","date":"2023-11-14T21:42:30.000Z","prev":{"text":"Git 命令手册","link":"/post/git-book"},"next":{"text":"如何活的更久一点","link":"/post/live-longer"}},"headers":[],"relativePath":"post/ui-design.md","filePath":"post/ui-design.md","lastUpdated":1714895959000}'),V={name:"post/ui-design.md"};function L(N,a,X,z,E,Q){return i(),p("div",null,a[0]||(a[0]=[e('<p>UI 设计并没有那么复杂。在我两年的产品设计师生涯中，我意识到大部分视觉和交互设计的都遵守几个简单的逻辑规则。不是艺术天赋或直觉，只是几个简单的规则。</p><p>最快速的学习就是实践，所以让我们开始吧。</p><h2 id="使用逻辑规则修复此示例" tabindex="-1">使用逻辑规则修复此示例 <a class="header-anchor" href="#使用逻辑规则修复此示例" aria-label="Permalink to &quot;使用逻辑规则修复此示例&quot;">​</a></h2><p>以下是一个短期业务租贷应用程序的物业详情页。第一个是原版，第二个是根据我的规则改进的版本。</p><p><img src="'+s+'" alt=""></p><p>即使你没有太多视觉交互设计的经验，你可能也会觉得原版设计感觉很凌乱。这是因为它在设计上有很多细节问题，可用性很差。可能你已经发现了一些问题。</p><p>我会依次使用以下规则或者说准则一次性修复原版的问题：</p><ol><li><a href="#_1-使用间距对相关元素进行分组">使用间距对相关元素进行分组</a></li><li><a href="#_2-保持一致性">保持一致性</a></li><li><a href="#_3-确保外观相似的元素功能相似">确保外观相似的元素功能相似</a></li><li><a href="#_4-创建清晰的视觉层次结构">创建清晰的视觉层次结构</a></li><li><a href="#_5-删除不必要的样式">删除不必要的样式</a></li><li><a href="#_6-有目的地使用颜色">有目的地使用颜色</a></li><li><a href="#_7-确保界面元素具有-3-1-的对比度">确保界面元素具有 3:1 的对比度</a></li><li><a href="#_8-确保文本具有-4-5-1-的对比度">确保文本具有 4.5:1 的对比度</a></li><li><a href="#_9-不要仅仅依靠颜色作为指标">不要仅仅依靠颜色作为指标</a></li><li><a href="#_10-使用单一的无衬线字体">使用单一的无衬线字体</a></li><li><a href="#_11-使用带有较高小写字母的字体">使用带有较高小写字母的字体</a></li><li><a href="#_12-尽量不使用大写字母">尽量不使用大写字母</a></li><li><a href="#_13-只使用常规和粗体字体粗细">只使用常规和粗体字体粗细</a></li><li><a href="#_14-避免纯黑色文字">避免纯黑色文字</a></li><li><a href="#_15-左对齐文本">左对齐文本</a></li><li><a href="#_16-对正文文本使用至少-1-5-倍行高">对正文文本使用至少 1.5 倍行高</a></li></ol><h2 id="_1-使用间距对相关元素进行分组" tabindex="-1">1. 使用间距对相关元素进行分组 <a class="header-anchor" href="#_1-使用间距对相关元素进行分组" aria-label="Permalink to &quot;1. 使用间距对相关元素进行分组&quot;">​</a></h2><p>将信息分解为更小的相关元素组有助于构建更清晰的页面结构。这使人们更快、更容易理解和记忆。</p><p>使用合理的间距对相关元素进行分组就是一种非常有效且简单的方法。你还可以组合多种分组方法，以便更清晰的显示分组结构。</p><p>在我们的示例中，原版内容之间缺乏间隙，所以看起来杂乱无章。增加间距有助于让内容的分组更加清晰。</p><p><img src="'+r+'" alt=""></p><h2 id="_2-保持一致性" tabindex="-1">2. 保持一致性 <a class="header-anchor" href="#_2-保持一致性" aria-label="Permalink to &quot;2. 保持一致性&quot;">​</a></h2><p>在 UI 设计中保持一致性非常重要。一致性意味着相似的元素在外观和功能上都表现得相似。</p><p>在我们的示例中，图标样式不一致，因为有些样式已填充，有些则未填充。我们统一使用线性圆角绘制图标。</p><p><img src="'+o+'" alt=""></p><p>并且在每个图标下添加文字描述，帮助人们理解它的作用。</p><p><img src="'+l+'" alt=""></p><h2 id="_3-确保外观相似的元素功能相似" tabindex="-1">3. 确保外观相似的元素功能相似 <a class="header-anchor" href="#_3-确保外观相似的元素功能相似" aria-label="Permalink to &quot;3. 确保外观相似的元素功能相似&quot;">​</a></h2><p>如果元素看起来很相似，人们会期望它们以类似的方式工作。因此，请尽量确保对具有相同功能的元素使用一致的视觉处理。</p><p>在我们的示例中，图标容器和 &quot;Book now&quot; 按钮有相似的视觉样式。这会让它们看起都是交互式的，即使它们不是。从图标中删除蓝色和按钮样式有助于避免它们被误认为是交互式元素。</p><p><img src="'+n+'" alt=""></p><h2 id="_4-创建清晰的视觉层次结构" tabindex="-1">4. 创建清晰的视觉层次结构 <a class="header-anchor" href="#_4-创建清晰的视觉层次结构" aria-label="Permalink to &quot;4. 创建清晰的视觉层次结构&quot;">​</a></h2><p>让界面中重要的元素看起来更突出，根据重要程度展示信息。</p><p>可以使用大小、颜色、对比度、间距、位置和深度的变化来创建清晰的视觉层次结构。</p><p>下面是一个没有明确视觉层次结构的网站横幅的示例，然后是按重要性顺序清晰呈现元素的横幅。</p><p><img src="'+_+'" alt=""></p><p><img src="'+c+'" alt=""></p><p>如果想要测试你的视觉层次结构是否清晰，一种快速简便的方法是使用斜视测试。只需眯起眼睛，看看你的设计。或者，可以远离屏幕或模糊你的设计。你仍然应该能够分辨出最重要的元素是什么，并识别界面的用途。</p><p>让我们将斜视测试应用于我们的示例。我们可以看到，有多个同样突出的元素在争夺注意力。同时，左下角的主要动作一点也不突出。</p><p><img src="'+h+'" alt=""></p><p>主要操作通常应该是界面上最突出的元素。为其提供高对比度的背景颜色和粗体字体粗细来提高该元素的层次。</p><p><img src="'+g+'" alt=""></p><p>使用斜视测检查试我们的设计，可以看到主要操作明显是右下角的 &quot;Book now&quot; 按钮。</p><p><img src="'+d+'" alt=""></p><h2 id="_5-删除不必要的样式" tabindex="-1">5. 删除不必要的样式 <a class="header-anchor" href="#_5-删除不必要的样式" aria-label="Permalink to &quot;5. 删除不必要的样式&quot;">​</a></h2><p>不必要的视觉风格可能会分散注意力，并可能增加认知负担（浪费大脑内存）。</p><p>尽量避免不必要的线条、颜色、背景和动画，以创建更简单、更集中的界面。</p><p><img src="'+m+'" alt=""></p><p>在我们的示例中，图像周围的空白和边框增加了不必要的视觉复杂性。它们不需要传达信息或对元素进行分组，因此可以删除它们以简化设计。</p><p><img src="'+u+'" alt=""></p><h2 id="_6-有目的地使用颜色" tabindex="-1">6. 有目的地使用颜色 <a class="header-anchor" href="#_6-有目的地使用颜色" aria-label="Permalink to &quot;6. 有目的地使用颜色&quot;">​</a></h2><p>谨慎使用颜色，有目的地使用。尽量避免纯粹使用颜色进行装饰，因为它可能会造成混淆和分散注意力。普通内容尽量使用黑白色，只在传达意义的地方添加颜色。</p><p>一种简单有效的方法是将品牌颜色应用于文本链接和按钮等交互式元素。这有助于教人们什么是互动的，什么是非互动的。尽量避免在非互动元素上使用品牌颜色。</p><p>不需要为所有交互式元素添加颜色，因为有些元素已经有视觉提示表明它们是交互式的。例如，以下示例中的卡片仍然具有交互性，无论是否带有蓝色链接。</p><p><img src="'+f+'" alt=""></p><p>在我们的原始示例中，蓝色标题可能看起来不错，但它使文本看起来具有交互性。为了避免混淆，可以从标题中删除蓝色，因为它不是交互式的。</p><p>我们还从其他非交互式元素（如星级）中删除了蓝色。这样可以更容易地看到哪些是交互式的，哪些是非交互式的。</p><p><img src="'+b+'" alt=""></p><h2 id="_7-确保界面元素具有-3-1-的对比度" tabindex="-1">7. 确保界面元素具有 3:1 的对比度 <a class="header-anchor" href="#_7-确保界面元素具有-3-1-的对比度" aria-label="Permalink to &quot;7. 确保界面元素具有 3:1 的对比度&quot;">​</a></h2><p>对比度是衡量两种颜色之间感知亮度差异的量度。它表示为 1：1 到 21：1 的比例。例如，黑色背景上的黑色文本具有最低的 1：1 对比度，而白色背景上的黑色文本具有最高的 21：1 对比度。有许多<a href="https://usecontrast.com/" target="_blank" rel="noreferrer">在线工具</a>可以帮助您测量不同颜色之间的对比度。</p><p>为了帮助确保有视力障碍的人能够清楚地看到界面细节，力争至少满足 <a href="https://www.w3.org/TR/WCAG21/" target="_blank" rel="noreferrer">Web 内容可访问性指南 （WCAG）</a> 2.1 AA 级颜色对比度要求。这意味着用户界面元素（如表单字段和按钮）至少需要具有 3：1 的对比度。</p><p>在我们的示例中，箭头图标对比度太低。为图标添加阴影并在图像的顶部三分之一处添加渐变叠加，无论图标位于哪个图像上，都可以提供足够的 3：1 对比度。</p><p><img src="'+q+'" alt=""></p><p>原始示例中的主按钮对比度也太低。我们之前在处理视觉层次结构时修复了它，但这里也值得一提。</p><p><img src="'+j+'" alt=""></p><p>低对比度按钮的风险在于，视力低下的人可能无法将其识别为按钮，因为他们看不到按钮的形状。将按钮对比度提高到 3：1 以上可使按钮可访问，还有助于纠正视觉层次结构。</p><p>将箭头和按钮的对比度增加到 3:1 以上的比例，可得到以下设计。我们正在一点一点地完善我们的设计，但我们仍然有很多的问题需要解决。</p><p><img src="'+k+'" alt=""></p><h2 id="_8-确保文本具有-4-5-1-的对比度" tabindex="-1">8. 确保文本具有 4.5:1 的对比度 <a class="header-anchor" href="#_8-确保文本具有-4-5-1-的对比度" aria-label="Permalink to &quot;8. 确保文本具有 4.5:1 的对比度&quot;">​</a></h2><p>为了帮助确保视力障碍者能够清晰地阅读文本，它需要满足以下 WCAG 2.1 AA 级对比度要求：</p><ul><li>小文本（18 像素及以下）需要至少 4.5:1 的对比度。</li><li>大文本（粗体粗细高于 18 像素或常规粗细高于 24 像素）需要至少 3:1 的对比度。</li></ul><p>在我们的示例中，照片计数元素中的小文本对比度不足。我们通过增加灰色容器的不透明度并添加文本阴影，将对比度提高到 4.5:1 以上。</p><p><img src="'+x+'" alt=""></p><p>描述文本的对比度也太低。薄的字体重量使其更难阅读。使用较深的灰色阴影有助于使文本更易于访问。我们将对文本进行进一步更新以改进它。</p><p><img src="'+P+'" alt=""></p><h2 id="_9-不要仅仅依靠颜色作为指标" tabindex="-1">9. 不要仅仅依靠颜色作为指标 <a class="header-anchor" href="#_9-不要仅仅依靠颜色作为指标" aria-label="Permalink to &quot;9. 不要仅仅依靠颜色作为指标&quot;">​</a></h2><p>色盲有许多不同的类型，它们主要影响男性。通常，色盲的人很难区分红色和绿色，但有些人根本看不到任何颜色。</p><p>为了确保色盲人员可以访问界面，您不能仅依靠颜色来传达含义或区分视觉元素。您需要使用其他视觉提示来区分界面元素。</p><p>在我们的示例中，“评论” 文本上使用蓝色来表示它是一个链接。如果删除颜色，则链接文本看起来与其他文本相同，因此色盲无法判断它是链接。在没有颜色的情况下，为链接文本添加下划线可以清楚地将其与其他文本区分开来。</p><p><img src="'+B+'" alt=""></p><h2 id="_10-使用单一的无衬线字体" tabindex="-1">10. 使用单一的无衬线字体 <a class="header-anchor" href="#_10-使用单一的无衬线字体" aria-label="Permalink to &quot;10. 使用单一的无衬线字体&quot;">​</a></h2><p>字体是一组具有相似风格或审美的相关字体。Helvetica 是字体的一个例子。字体是字体中的变体，例如粗细或大小。例如，Helvetica 粗体和 Helvetica regular 是 Helvetica 字体中的 2 种不同字体。</p><p>使用单一的无衬线字体（也称为&quot;无装饰&quot;或&quot;无细节&quot;字体）进行界面设计是最安全的，因为它们通常是最清晰、中性和最简单的。</p><p>在我们的示例中，标题使用了详细的衬线字体，这有点难以阅读，可能会分散某些人的注意力。它还具有可能与此物业租赁应用程序中的某些照片不匹配的个性。使用无衬线字体简化它有助于提高可用性和美观性。</p><p><img src="'+w+'" alt=""></p><p><img src="'+v+'" alt=""></p><h2 id="_11-使用带有较高小写字母的字体" tabindex="-1">11. 使用带有较高小写字母的字体 <a class="header-anchor" href="#_11-使用带有较高小写字母的字体" aria-label="Permalink to &quot;11. 使用带有较高小写字母的字体&quot;">​</a></h2><p>寻找具有较高小写字母和较大字母间距的字体，因为它们通常在小尺寸下更清晰。字体中小写字母的高度称为 x height。</p><p><img src="'+C+'" alt=""></p><p>我们的示例使用 Gill Sans 字体，该字体的 x height 相对较低。将字体更改为具有较大 x height 的字体（如 Lato），有助于提高可读性。</p><p><img src="'+D+'" alt=""></p><p>下面是字体从 Gill Sans 更新到 Lato 后的示例。</p><p><img src="'+T+'" alt=""></p><h2 id="_12-尽量不使用大写字母" tabindex="-1">12. 尽量不使用大写字母 <a class="header-anchor" href="#_12-尽量不使用大写字母" aria-label="Permalink to &quot;12. 尽量不使用大写字母&quot;">​</a></h2><p>除非你对人大喊大叫，否则没有太多正当理由使用大写字母。声音很大，难以阅读。</p><p>当你阅读时，你看的是一个单词的形状，而不是看每个字母。形状可帮助您更快地识别单词。大写单词都具有相同的矩形形状。这迫使您一个接一个地阅读每个字母。</p><p><img src="'+A+'" alt=""></p><p>在我们的示例中，位置文本使用大写。将其更改为句子大小写，其中只有第一个单词和专有名词（人名、地点或事物的名称）大写，有助于提高可读性。</p><p><img src="'+G+'" alt=""></p><p><img src="'+S+'" alt=""></p><h2 id="_13-只使用常规和粗体字体粗细" tabindex="-1">13. 只使用常规和粗体字体粗细 <a class="header-anchor" href="#_13-只使用常规和粗体字体粗细" aria-label="Permalink to &quot;13. 只使用常规和粗体字体粗细&quot;">​</a></h2><p>仅仅因为字体中有很多字体粗细可用，并不意味着您需要在设计中使用所有这些字体粗细。使用许多不同的字体粗细会给界面增加噪音和混乱。这也使得一致地使用每种字体粗细变得更加困难。</p><p>仅使用常规和粗体字体粗细，使您的设计系统保持简单明了。</p><p><img src="'+U+'" alt=""></p><p>快速使用提示：</p><ul><li>对标题使用粗体粗细来强调它们。</li><li>对其他较小的文本使用常规字体粗细。</li><li>如果您决定使用非常细或较粗的字体粗细，请将它们保留用于标题和较大的文本，因为它们可能难以以较小的尺寸阅读。</li></ul><p>在我们的示例中，位置文本使用浅色字体粗细。尽管我们已将对比度提高到所需的 4.5：1 对比度以上，但某些人仍然难以阅读细字符。将字体粗细增加到常规字体有助于提高可读性并简化设计。</p><p><img src="'+I+'" alt=""></p><p><img src="'+R+'" alt=""></p><h2 id="_14-避免纯黑色文字" tabindex="-1">14. 避免纯黑色文字 <a class="header-anchor" href="#_14-避免纯黑色文字" aria-label="Permalink to &quot;14. 避免纯黑色文字&quot;">​</a></h2><p>对于 UI 设计，通常最安全的是避免纯黑色，因为它与白色的对比度非常高。这种高对比度会导致阅读文本时眼睛疲劳和疲劳。</p><p>黑色的色彩亮度为 0%，白色的色彩亮度为 100%。颜色亮度的巨大差异使我们的眼睛更加努力地工作。最安全的做法是避免纯黑色与白色，而是选择深灰色。</p><p>在我们的示例中，纯黑色用于多个元素。将其更改为深灰色有助于提高可读性。以前在查看视觉层次结构时，我们注意到属性描述文本过于突出。为了确保界面元素按重要性顺序显示，我们在属性描述文本中使用较浅的灰色来降低其突出性。</p><p><img src="'+y+'" alt=""></p><h2 id="_15-左对齐文本" tabindex="-1">15. 左对齐文本 <a class="header-anchor" href="#_15-左对齐文本" aria-label="Permalink to &quot;15. 左对齐文本&quot;">​</a></h2><p>英语从左到右，以F形模式向下阅读。因此，最好保持文本左对齐以获得最佳可读性。对于长正文文本，最安全的做法是避免居中对齐或对齐的文本。阅读起来更加困难，尤其是对于那些有认知障碍的人来说。</p><p>居中对齐可以用于标题和短文本，因为它可以快速阅读。但是，居中对齐会使较长的正文文本更难阅读，因为每行的起点都在不断变化。你的眼睛需要更加努力地找到每条线的起点。</p><p><img src="'+H+'" alt=""></p><p>在我们的示例中，属性描述文本居中对齐。左对齐文本可提高可读性，并且也与上面左对齐的文本一致。</p><p><img src="'+Y+'" alt=""></p><h2 id="_16-对正文文本使用至少-1-5-倍行高" tabindex="-1">16. 对正文文本使用至少 1.5 倍行高 <a class="header-anchor" href="#_16-对正文文本使用至少-1-5-倍行高" aria-label="Permalink to &quot;16. 对正文文本使用至少 1.5 倍行高&quot;">​</a></h2><p>行高是两行文本之间的垂直距离。行与行之间的间距有助于防止人们重读同一行文本。阅读起来看起来和感觉也更舒适。</p><p>为了提高可访问性和可读性，尤其是对于长正文文本，请确保行高至少为 1.5 （150%）。将线高保持在 1.5 到 2 之间通常效果很好。</p><p><img src="'+Z+'" alt=""></p><p>在我们的示例中，行高仅为 1 （100%）。将其增加到 1.6 （160%） 有助于提高可读性。</p><p><img src="'+W+'" alt=""></p><h2 id="我们修好了" tabindex="-1">我们修好了！ <a class="header-anchor" href="#我们修好了" aria-label="Permalink to &quot;我们修好了！&quot;">​</a></h2><p>通过一些简单但功能强大的 UI 设计指南，我们很快发现并修复了示例设计中的一大堆问题。</p><p><img src="'+s+'" alt=""></p><p>我希望你开始看到UI设计不必那么难。它可能看起来是一种神奇的艺术形式，但其中很多都是由逻辑规则或准则组成的，就像我们刚刚学到的那样。使用客观逻辑而不是主观意见，可以更快、更轻松地设计直观、可访问且美观的界面。</p><h2 id="更多内容" tabindex="-1">更多内容 <a class="header-anchor" href="#更多内容" aria-label="Permalink to &quot;更多内容&quot;">​</a></h2><p>这些只是我的 <a href="https://www.practical-ui.com/" target="_blank" rel="noreferrer">UI 设计书</a>中的一些逻辑驱动的指南。你会在书中找到数百个详细的例子。</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://www.adhamdannaway.com/category/blog/ui-design" target="_blank" rel="noreferrer">www.adhamdannaway.com/category/blog/ui-design</a></li></ul>',126)]))}const K=t(V,[["render",L]]);export{J as __pageData,K as default};
