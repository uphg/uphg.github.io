import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.BHpayLOB.js";const g=JSON.parse('{"title":"Python 模块详解","description":"","frontmatter":{"title":"Python 模块详解","date":"2025-04-07T13:22:26.000Z","tags":["Python","模块"],"prev":{"text":"Python 面向对象编程","link":"/post/python-oop"},"next":{"text":"Python 函数式编程","link":"/post/py-functional"}},"headers":[],"relativePath":"post/py-module.md","filePath":"post/py-module.md","lastUpdated":1744039768000}'),l={name:"post/py-module.md"};function h(e,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="模块结构与规范" tabindex="-1">模块结构与规范 <a class="header-anchor" href="#模块结构与规范" aria-label="Permalink to &quot;模块结构与规范&quot;">​</a></h2><p>以下是以内建 <code>sys</code> 模块为例的标准模块模板：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env python3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot; 模块文档注释（使用三引号规范） &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__author__ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Michael Liao&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys.argv</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新为f-string格式化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Too many arguments!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    test()</span></span></code></pre></div><p>第1行和第2行是标准注释，第1行注释可以让这个 <code>hello.py</code> 文件直接在 Unix/Linux/Mac 上运行，第2行注释表示.py文件本身使用标准 UTF-8 编码；</p><h3 id="关键要素解析" tabindex="-1">关键要素解析 <a class="header-anchor" href="#关键要素解析" aria-label="Permalink to &quot;关键要素解析&quot;">​</a></h3><ol><li><p><strong>解释器声明</strong>（第1行）：</p><ul><li>使脚本在Unix-like系统可直接执行（需<code>chmod +x hello.py</code>）</li></ul></li><li><p><strong>编码声明</strong>（第2行）：</p><ul><li>Python 3默认UTF-8编码，但显式声明可确保跨版本兼容性</li></ul></li><li><p><strong>模块文档</strong>（第4行）：</p><ul><li>可通过<code>__doc__</code>属性访问（如<code>print(hello.__doc__)</code>）</li><li>建议使用三引号多行字符串</li></ul></li><li><p><strong>特殊变量</strong>：</p><ul><li><code>__author__</code>：作者信息</li><li><code>__name__</code>：当直接执行时值为<code>&#39;__main__&#39;</code>，被导入时为模块名</li></ul></li><li><p><strong>执行控制</strong>：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 模块作为脚本直接运行时成立</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    test()                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 被导入时不执行</span></span></code></pre></div></li></ol><h2 id="模块使用示例" tabindex="-1">模块使用示例 <a class="header-anchor" href="#模块使用示例" aria-label="Permalink to &quot;模块使用示例&quot;">​</a></h2><h3 id="命令行测试" tabindex="-1">命令行测试 <a class="header-anchor" href="#命令行测试" aria-label="Permalink to &quot;命令行测试&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.py</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Alice</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Alice!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Charlie</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Too</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> many</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arguments!</span></span></code></pre></div><h3 id="交互环境测试" tabindex="-1">交互环境测试 <a class="header-anchor" href="#交互环境测试" aria-label="Permalink to &quot;交互环境测试&quot;">​</a></h3><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 无输出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello.test()          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显式调用函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hello, world!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello.__author__</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Michael Liao&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__doc__</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; 模块文档注释（使用三引号规范） &#39;</span></span></code></pre></div><h2 id="作用域控制" tabindex="-1">作用域控制 <a class="header-anchor" href="#作用域控制" aria-label="Permalink to &quot;作用域控制&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">命名风格</th><th style="text-align:left;">示例</th><th style="text-align:left;">可见性规则</th></tr></thead><tbody><tr><td style="text-align:left;">public</td><td style="text-align:left;"><code>calculate</code></td><td style="text-align:left;">可被外部直接引用</td></tr><tr><td style="text-align:left;">特殊变量</td><td style="text-align:left;"><code>__init__</code></td><td style="text-align:left;">系统定义，不应自定义</td></tr><tr><td style="text-align:left;">protected</td><td style="text-align:left;"><code>_internal</code></td><td style="text-align:left;">约定内部使用（实际仍可访问）</td></tr><tr><td style="text-align:left;">private</td><td style="text-align:left;"><code>__private</code></td><td style="text-align:left;">类内使用（发生名称修饰）</td></tr></tbody></table><h3 id="封装示例" tabindex="-1">封装示例 <a class="header-anchor" href="#封装示例" aria-label="Permalink to &quot;封装示例&quot;">​</a></h3><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _format_greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name.title()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 内部格式化逻辑</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;公开接口：执行参数检查&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name.isalpha():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名需全字母&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _format_greeting(name)</span></span></code></pre></div><h2 id="第三方模块管理" tabindex="-1">第三方模块管理 <a class="header-anchor" href="#第三方模块管理" aria-label="Permalink to &quot;第三方模块管理&quot;">​</a></h2><h3 id="安装方式对比" tabindex="-1">安装方式对比 <a class="header-anchor" href="#安装方式对比" aria-label="Permalink to &quot;安装方式对比&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">工具</th><th style="text-align:left;">适用场景</th><th style="text-align:left;">示例命令</th></tr></thead><tbody><tr><td style="text-align:left;">pip</td><td style="text-align:left;">单个包安装</td><td style="text-align:left;"><code>pip install requests</code></td></tr><tr><td style="text-align:left;">conda</td><td style="text-align:left;">科学计算环境</td><td style="text-align:left;"><code>conda install numpy</code></td></tr><tr><td style="text-align:left;">虚拟环境</td><td style="text-align:left;">项目隔离依赖</td><td style="text-align:left;"><code>python -m venv myenv</code></td></tr></tbody></table><h3 id="推荐工具链" tabindex="-1">推荐工具链 <a class="header-anchor" href="#推荐工具链" aria-label="Permalink to &quot;推荐工具链&quot;">​</a></h3><ol><li><p><strong>Anaconda</strong>（科学计算）</p><ul><li>预装1500+数据科学包</li><li>支持虚拟环境管理</li><li>跨平台二进制依赖管理</li></ul></li><li><p><strong>pip + venv</strong>（通用开发）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .venv</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 激活环境（Windows）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.venv\\Scripts\\activate.bat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pillow==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.5.0</span></span></code></pre></div></li></ol><h2 id="模块搜索机制" tabindex="-1">模块搜索机制 <a class="header-anchor" href="#模块搜索机制" aria-label="Permalink to &quot;模块搜索机制&quot;">​</a></h2><h3 id="路径解析流程" tabindex="-1">路径解析流程 <a class="header-anchor" href="#路径解析流程" aria-label="Permalink to &quot;路径解析流程&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[导入模块] --&gt; B{是否内置模块?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B -- 是 --&gt; C[直接加载]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B -- 否 --&gt; D{是否在sys.path中?}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D -- 是 --&gt; E[加载对应文件]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D -- 否 --&gt; F[抛出ImportError]</span></span></code></pre></div><h3 id="路径管理策略" tabindex="-1">路径管理策略 <a class="header-anchor" href="#路径管理策略" aria-label="Permalink to &quot;路径管理策略&quot;">​</a></h3><ol><li><p><strong>临时添加</strong>：</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.path.insert(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/custom/path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 优先搜索自定义路径</span></span></code></pre></div></li><li><p><strong>永久配置</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Linux/macOS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PYTHONPATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/custom/path:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PYTHONPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Windows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PYTHONPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\custom\\path;%PYTHONPATH%&quot;</span></span></code></pre></div></li><li><p><strong>开发模式安装</strong>（推荐）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 通过setup.py配置</span></span></code></pre></div></li></ol><h2 id="最佳实践建议" tabindex="-1">最佳实践建议 <a class="header-anchor" href="#最佳实践建议" aria-label="Permalink to &quot;最佳实践建议&quot;">​</a></h2><ol><li><p>模块命名</p><ul><li>使用小写字母+下划线（<code>data_processor.py</code>）</li><li>避免与标准库同名（如勿命名<code>sys.py</code>）</li></ul></li><li><p>导入规范</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 优先使用绝对导入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package.submodule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 避免通配符导入</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不推荐：from module import *</span></span></code></pre></div></li><li><p>版本兼容</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在__init__.py中声明</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__version__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.0.3&#39;</span></span></code></pre></div></li><li><p>类型提示（Python 3.5+）</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data: list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) -&gt; dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;处理数据并返回统计字典&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 实现代码...</span></span></code></pre></div></li></ol><p>通过遵循这些规范和最佳实践，可以创建出结构清晰、易于维护的Python模块，并有效管理项目依赖。</p>`,28)]))}const y=i(l,[["render",h]]);export{g as __pageData,y as default};
