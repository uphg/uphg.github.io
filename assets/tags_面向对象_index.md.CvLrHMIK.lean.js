import{P as n,a as r}from"./chunks/PostsContainer.CutwuT5g.js";import{d as p,c as o,o as a,G as l,w as d,F as i,B as m,b as c}from"./chunks/framework.BHpayLOB.js";import"./chunks/CustomContainer.D2tcrHcd.js";import"./chunks/theme.CxKxqB40.js";const v=JSON.parse(`{"title":"","description":"","frontmatter":{"layout":"posts","sidebar":false,"next":{"text":"Windows 畅玩 Claude Code","link":"/post/use-claude-code-router"}},"headers":[],"params":{"name":"面向对象","path":"面向对象","page":1,"next":null,"prev":null,"items":[{"title":"Python 面向对象高级编程","date":"2025-04-08T13:33:47.000Z","tags":["Python","面向对象"],"description":"数据封装、继承和多态只是面向对象程序设计中最基础的 3 个概念。在 Python 中，面向对象还有很多种高级特性。 使用 __slots__ 限制实例属性 Python的动态特性允许实例的任意属性绑定，但有时需要约束这种灵活性： 动态绑定机制 class Student:     pass  s = Student()","filePath":"F:\\\\Development\\\\Personal\\\\blog-creator\\\\src\\\\post\\\\python-oop-advanced.md","to":"/post/python-oop-advanced"},{"title":"Python 面向对象编程","date":"2025-04-08T12:55:15.000Z","tags":["Python","面向对象"],"description":"核心概念 面向对象编程（OOP）以对象为程序基本单元，每个对象包含数据属性和操作数据的方法。与面向过程编程的线性执行不同，OOP通过对象间的消息传递实现程序逻辑。 编程范式对比   面向过程：程序由函数串行组成，通过分解函数降低复杂度 # 学生成绩处理（面向过程） std1 = {'name': 'Michael', ","filePath":"F:\\\\Development\\\\Personal\\\\blog-creator\\\\src\\\\post\\\\python-oop.md","to":"/post/python-oop"}],"total":1},"relativePath":"tags/面向对象/index.md","filePath":"tags/[path]/index.md","lastUpdated":1714266532000}`),h={name:"tags/面向对象/index.md"},$=p({...h,setup(u){return(t,P)=>(a(),o("div",null,[l(r,{title:`标签：${t.$params.name}`,next:t.$params.next,prev:t.$params.prev,page:t.$params.page,total:t.$params.total},{default:d(()=>[(a(!0),o(i,null,m(t.$params.items,(e,s)=>(a(),c(n,{key:s,title:e.title,to:e.to,description:e.description,date:e.date,tags:e.tags},null,8,["title","to","description","date","tags"]))),128))]),_:1},8,["title","next","prev","page","total"])]))}});export{v as __pageData,$ as default};
